<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <meta name="version" content="0.11"/>
  <meta name="subject" content="package manager"/>
  <meta name="title" content="Package Manager"/>

  <title>The build2 Package Manager</title>

  <style type="text/css">
/* file      : common.css
 * copyright : Copyright (c) 2014-2019 Code Synthesis Ltd
 * license   : MIT; see accompanying LICENSE file
 */

html
{
  font-family: "Helvetica Neue", Helvetica, "Segoe UI", Arial, freesans, sans-serif;
  font-weight: normal;
  font-size: 18px;
  line-height: 1.4em;
  letter-spacing: 0.01em;

  color: #292929;
}

body {margin: 0;} /* There is non-0 default margin for body. */

/* See notes on what's going on here. */
body {min-width: 17em;}
@media only screen and (min-width: 360px)
{
  body {min-width: 19em;}
}

/*
 * Header (optional).
 */

#header-bar
{
  width: 100%;

  background: rgba(0, 0, 0, 0.04);
  border-bottom: 1px solid rgba(0, 0, 0, 0.2);

  padding: .4em 0 .42em 0;
  margin: 0 0 1.4em 0;
}

#header
{
  /* Same as in #content. */
  max-width: 41em;
  margin: 0 auto 0 auto;
  padding: 0 .4em 0 .4em;

  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;

  width: 100%;
  display: table;
  border: none;
  border-collapse: collapse;
}

#header-logo, #header-menu
{
  display: table-cell;
  border: none;
  padding: 0;
  vertical-align: middle;
}

#header-logo {text-align: left;}
#header-menu {text-align: right;}

/* These overlap with #header's margin because of border collapsing. */
#header-logo {padding-left: .4em;}
#header-menu {padding-right: .4em;}

#header-logo a
{
  color: #000;
  text-decoration: none;
  outline: none;
}
#header-logo a:visited {color: #000;}
#header-logo a:hover, #header-logo a:active {color: #000;}

#header-menu a
{
  font-size: 0.889em;
  line-height: 1.4em;
  text-align: right;
  margin-left: 1.2em;
  white-space: nowrap;
  letter-spacing: 0;
}

#header-menu a
{
  color: #000;
  outline: none;
}
#header-menu a:visited {color: #000;}
#header-menu a:hover, #header-menu a:active
{
  color: #3870c0;
  text-decoration: none;
}

/* Flexbox-based improvements though the above works reasonably well. */
#header-menu-body
{
  width: 100%;

  display: -webkit-inline-flex;
  display: inline-flex;

  -webkit-flex-flow: row wrap;
  flex-flow: row wrap;

  -webkit-justify-content: flex-end;
  justify-content: flex-end;
}

/* Whether we want it (and at which point) depends on the size of the menu. */
/*
@media only screen and (max-width: 567px)
{
  #header-menu-body
  {
    -webkit-flex-direction: column;
    flex-direction: column;
  }
}
*/

/*
 * Content.
 */

#content
{
  max-width: 41em;
  margin: 0 auto 0 auto;
  padding: 0 .4em 0 .4em; /* Space between text and browser frame. */

  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

/*
 * Footer (optional).
 */

#footer
{
  color: #767676;
  font-size: 0.7223em;
  line-height: 1.3em;
  margin: 2.2em 0 1em 0;
  text-align: center;
}

#footer a
{
  color: #767676;
  text-decoration: underline;
}
#footer a:visited {color: #767676;}
#footer a:hover, #footer a:active {color: #3870c0;}

/* Screen size indicator in the footer. The before/after content is in case
   we don't have any content in the footer. Margin is to actually see the
   border separate from the browser frame. */

/*
#footer:before {content: "\A0";}
#footer:after {content: "\A0";}

#footer
{
  border-left: 1px solid;
  border-right: 1px solid;
  margin-left: 1px;
  margin-right: 1px;
}

@media only screen and (max-width: 359px)
{
  #footer {border-color: red;}
}

@media only screen and (min-width: 360px) and (max-width: 567px)
{
  #footer {border-color: orange;}
}

@media only screen and (min-width: 568px) and (max-width: 1023px)
{
  #footer {border-color: blue;}
}

@media only screen and (min-width: 1024px)
{
  #footer {border-color: green;}
}
*/

/*
 * Common elements.
 */

p, li, dd {text-align: justify;}
.code {text-align: left;} /* Manually aligned. */
pre {text-align: left;}   /* If it is inside li/dd. */

/* Notes. */

.note
{
  color: #606060;
}

div.note
{
  margin: 2em 0 2em 0; /* The same top/bottom margings as pre box. */

  padding-left: 0.5em;
  border: 0.25em;
  border-left-style: solid;
  border-color: #808080;

  page-break-inside: avoid;
}

div.note :first-child {margin-top:    0;}
div.note :last-child  {margin-bottom: 0;}

span.note::before {content: "[Note: "}
span.note::after  {content: "]"}

/* Links. */
a
{
  color: #3870c0;
  /*color: #4078c0;*/
  text-decoration: none;
}

a:hover, a:active
{
/*color: #006fbf;*/
/*color: #0087e7;*/
  text-decoration: underline;
}

a:visited
{
/*color: #003388;*/
  color: #00409c;
}

/* Standard paragraph. */

p, pre {margin: 1em 0 1em 0;}

/* Standard lists. */
ul, ol, dl {margin: 1em 0 1em 0;}
ul li, ol li {margin: 0 0 .4em 0;}
ul li {list-style-type: circle;}
dl dt {margin: 0 0 0 0;}
dl dd {margin: 0 0 .6em 1.8em;}

code, pre
{
  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
  font-size: 0.92em;
  letter-spacing: 0;
}

pre {white-space: pre-wrap;}

@media only screen and (max-width: 567px)
{
  pre {word-break: break-all;}
}

/* Use page rather than system font settings. */
input
{
  font-family: inherit;
  font-weight: inherit;
  font-size:   inherit;
  line-height: inherit;
}

/* file      : pre-box.css
 * copyright : Copyright (c) 2014-2019 Code Synthesis Ltd
 * license   : MIT; see accompanying LICENSE file
 */

pre
{
  background-color: rgba(0, 0, 0, 0.05);
  border-radius: 0.2em;
  padding: .8em .4em .8em .4em;
  margin: 2em -.4em 2em -.4em; /* Use margins of #content. */
}

/* file      : code-box.css
 * copyright : Copyright (c) 2014-2019 Code Synthesis Ltd
 * license   : MIT; see accompanying LICENSE file
 */

code
{
  background-color: rgba(0, 0, 0, 0.05);
  border-radius: 0.2em;
  padding: .2em .32em .18em .32em;
}

/*
code::before
{
  letter-spacing: -0.2em;
  content: "\00a0";
}

code::after
{
  letter-spacing: -0.2em;
  content: "\00a0";
}
*/

/* file      : toc.css
 * copyright : Copyright (c) 2014-2019 Code Synthesis Ltd
 * license   : MIT; see accompanying LICENSE file
 */

table.toc
{
  border-style      : none;
  border-collapse   : separate;
  border-spacing    : 0;

  margin            : 0.2em 0 0.2em 0;
  padding           : 0 0 0 0;
}

table.toc tr
{
  padding           : 0 0 0 0;
  margin            : 0 0 0 0;
}

table.toc * td, table.toc * th {
  border-style      : none;
  margin            : 0 0 0 0;
  vertical-align    : top;
}

table.toc * th
{
  font-weight       : normal;
  padding           : 0 0.8em 0 0;
  text-align        : left;
  white-space       : nowrap;
}

table.toc * table.toc th
{
  padding-left      : 1em;
}

table.toc * td
{
  padding           : 0 0 0 0;
  text-align        : left;
}

table.toc * td.preface
{
  padding-left      : 1.35em;
}

/* file      : intro.css
 * copyright : Copyright (c) 2014-2019 Code Synthesis Ltd
 * license   : MIT; see accompanying LICENSE file
 */

/* Bases:
 *
 * common.css
 * pre-box.css
 * code-box.css
 *
 */

#content
{
  max-width: 43.6em;
  padding-left: 3em; /* Reserve for headings. */
}

h1
{
  font-weight: normal;
  font-size: 2em;
  line-height: 1.4em;
  margin: 1.6em 0 .6em -1.4em;
}

h1.preface
{
  margin-left: -.56em;
}

h2
{
  font-weight: normal;
  font-size: 1.556em;
  line-height: 1.4em;
  margin: 1.6em 0 .6em -.8em;
}

h3
{
  font-weight: normal;
  font-size: 1.3em;
  line-height: 1.4em;
  margin: 1.6em 0 .6em -.2em;
}

/* Title page */

#titlepage {
  margin: 0 0 4em 0;
  border-bottom: 1px solid black;
}

#titlepage .title {
  font-weight: normal;
  font-size: 2.333em;
  line-height: 1.4em;
  letter-spacing: 0;
  text-align: center;
  margin: 2em 0 2em 0;
}

#titlepage p {
  font-size: 0.889em;
  line-height: 1.4em;
  margin: 2em 0 .6em 0;
}

  </style>

</head>
<body>
<div id="content">

  <div class="noprint"> <!-- Exclude from html2ps. -->

  <div id="titlepage">
    <div class="title">The <code>build2</code> Package Manager</div>

    <p id="revision">Revision <code>0.11</code>, June 2019<br/>
    This revision of the document describes the <a href="https://build2.org"><code>build2</code></a>
    package manager <code>0.11.X</code> series and is available in the
    following formats:
    <a href="build2-package-manager-manual.xhtml">XHTML</a>,
    <a href="build2-package-manager-manual-a4.pdf">PDF/A4</a>,
    <a href="build2-package-manager-manual-letter.pdf">PDF/Letter</a>,
    <a href="build2-package-manager-manual-a4.ps">PostScript/A4</a>, and
    <a href="build2-package-manager-manual-letter.ps">PostScript/Letter</a>.</p>

    <p>Copyright &#169; 2014-2019 <a href="https://codesynthesis.com">Code
    Synthesis Ltd</a><br/>
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the MIT License.</p>
  </div>

  <h1>Table of Contents</h1>

  <table class="toc">
    <tr><td class="preface" colspan="2"><a
href="#preface">Preface</a></td></tr>
    <tr><th>1</th><td><a href="#package-name">Package Name</a></td></tr>
    <tr><th>2</th><td><a href="#package-version">Package Version</a></td></tr>
    <tr><th>3</th><td><a href="#manifests">Manifests</a>
      <table class="toc">
        <tr><th>3.1</th><td><a href="#manifest-format">Manifest
Format</a></td></tr>
        <tr><th>3.2</th><td><a href="#manifest-package">Package Manifest</a>
          <table class="toc">
            <tr><th>3.2.1</th><td><a
href="#manifest-package-name"><code>name</code></a></td></tr>
            <tr><th>3.2.2</th><td><a
href="#manifest-package-version"><code>version</code></a></td></tr>
            <tr><th>3.2.3</th><td><a
href="#manifest-package-project"><code>project</code></a></td></tr>
            <tr><th>3.2.4</th><td><a
href="#manifest-package-"><code>priority</code></a></td></tr>
            <tr><th>3.2.5</th><td><a
href="#manifest-package-summary"><code>summary</code></a></td></tr>
            <tr><th>3.2.6</th><td><a
href="#manifest-package-license"><code>license</code></a></td></tr>
            <tr><th>3.2.7</th><td><a
href="#manifest-package-topics"><code>topics</code></a></td></tr>
            <tr><th>3.2.8</th><td><a
href="#manifest-package-keywords"><code>keywords</code></a></td></tr>
            <tr><th>3.2.9</th><td><a
href="#manifest-package-description"><code>description</code></a></td></tr>
            <tr><th>3.2.10</th><td><a
href="#manifest-package-changes"><code>changes</code></a></td></tr>
            <tr><th>3.2.11</th><td><a
href="#manifest-package-url"><code>url</code></a></td></tr>
            <tr><th>3.2.12</th><td><a
href="#manifest-package-doc-url"><code>doc-url</code></a></td></tr>
            <tr><th>3.2.13</th><td><a
href="#manifest-package-src-url"><code>src-url</code></a></td></tr>
            <tr><th>3.2.14</th><td><a
href="#manifest-package-package-url"><code>package-url</code></a></td></tr>
            <tr><th>3.2.15</th><td><a
href="#manifest-package-email"><code>email</code></a></td></tr>
            <tr><th>3.2.16</th><td><a
href="#manifest-package-package-email"><code>package-email</code></a></td></tr>
            <tr><th>3.2.17</th><td><a
href="#manifest-package-build-email"><code>build-email</code></a></td></tr>
            <tr><th>3.2.18</th><td><a
href="#manifest-package-warning-email"><code>build-warning-email</code></a></td></tr>
            <tr><th>3.2.19</th><td><a
href="#manifest-package-error-email"><code>build-error-email</code></a></td></tr>
            <tr><th>3.2.20</th><td><a
href="#manifest-package-depends"><code>depends</code></a></td></tr>
            <tr><th>3.2.21</th><td><a
href="#manifest-package-requires"><code>requires</code></a></td></tr>
            <tr><th>3.2.22</th><td><a
href="#manifest-package-builds"><code>builds</code></a></td></tr>
            <tr><th>3.2.23</th><td><a
href="#manifest-package-include-exclude"><code>build-{include,exclude}</code></a></td></tr>
          </table>
        </td></tr>
        <tr><th>3.3</th><td><a href="#manifest-package-list-pkg">Package List
Manifest for <code><b>pkg</b></code> Repositories</a>
          <table class="toc">
            <tr><th>3.3.1</th><td><a
href="#manifest-package-list-pkg-sha256sum"><code>sha256sum</code> (list
manifest)</a></td></tr>
            <tr><th>3.3.2</th><td><a
href="#manifest-package-list-pkg-package-location"><code>location</code>
(package manifest)</a></td></tr>
            <tr><th>3.3.3</th><td><a
href="#manifest-package-list-pkg-package-sha256sum"><code>sha256sum</code>
(package manifest)</a></td></tr>
          </table>
        </td></tr>
        <tr><th>3.4</th><td><a href="#manifest-package-list-dir">Package List
Manifest for <code><b>dir</b></code> Repositories</a>
          <table class="toc">
            <tr><th>3.4.1</th><td><a
href="#manifest-package-list-dir-location"><code>location</code></a></td></tr>
            <tr><th>3.4.2</th><td><a
href="#manifest-package-list-dir-fragment"><code>fragment</code></a></td></tr>
          </table>
        </td></tr>
        <tr><th>3.5</th><td><a href="#manifest-repository">Repository
Manifest</a>
          <table class="toc">
            <tr><th>3.5.1</th><td><a
href="#manifest-repository-location"><code>location</code></a></td></tr>
            <tr><th>3.5.2</th><td><a
href="#manifest-repository-type"><code>type</code></a></td></tr>
            <tr><th>3.5.3</th><td><a
href="#manifest-repository-role"><code>role</code></a></td></tr>
            <tr><th>3.5.4</th><td><a
href="#manifest-repository-trust"><code>trust</code></a></td></tr>
            <tr><th>3.5.5</th><td><a
href="#manifest-repository-url"><code>url</code></a></td></tr>
            <tr><th>3.5.6</th><td><a
href="#manifest-repository-email"><code>email</code></a></td></tr>
            <tr><th>3.5.7</th><td><a
href="#manifest-repository-summary"><code>summary</code></a></td></tr>
            <tr><th>3.5.8</th><td><a
href="#manifest-repository-description"><code>description</code></a></td></tr>
            <tr><th>3.5.9</th><td><a
href="#manifest-repository-certificate"><code>certificate</code></a></td></tr>
            <tr><th>3.5.10</th><td><a
href="#manifest-repository-fragment"><code>fragment</code></a></td></tr>
          </table>
        </td></tr>
        <tr><th>3.6</th><td><a href="#manifest-repository-list">Repository
List Manifest</a></td></tr>
        <tr><th>3.7</th><td><a href="#manifest-signature-pkg">Signature
Manifest for <code><b>pkg</b></code> Repositories</a>
          <table class="toc">
            <tr><th>3.7.1</th><td><a
href="#manifest-signature-pkg-sha256sum"><code>sha256sum</code></a></td></tr>
            <tr><th>3.7.2</th><td><a
href="#manifest-signature-pkg-signature"><code>signature</code></a></td></tr>
          </table>
        </td></tr>
      </table>
    </td></tr>
  </table>

  </div> <!-- noprint -->
  <h1 id="preface" class="preface">Preface</h1>

  <p>This document describes <code>bpkg</code>, the <code>build2</code>
  package dependency manager. For the package manager command line interface
  refer to the <a href="bpkg.xhtml"><code><b>bpkg(1)</b></code></a> man
  pages.</p>

  <h1 id="package-name">1 Package Name</h1>

  <p>The <code>bpkg</code> package name can contain ASCII alphabetic
  characters (<code>[a-zA-Z]</code>), digits (<code>[0-9]</code>), underscores
  (<code>_</code>), plus/minus (<code>+-</code>), and dots/periods
  (<code><code>.</code></code>). The name must be at least two characters long
  with the following additional restrictions:</p>

  <ol>
  <li>It must start with an alphabetic character.</li>

  <li>It must end with an alphabetic, digit, or plus character.</li>

  <li>It must not be any of the following illegal names:

  <pre>build
con prn aux nul
com1 com2 com3 com4 com5 com6 com7 com8 com9
lpt1 lpt2 lpt3 lpt4 lpt5 lpt6 lpt7 lpt8 lpt9</pre></li>
  </ol>

  <p>The use of the plus (<code>+</code>) character in package names is
  discouraged. <span class="note">Pluses are used in URL encoding which makes
  specifying packages that contain pluses in URLs cumbersome.</span></p>

  <p>The use of the dot (<code>.</code>) character in package names is
  discouraged except for distinguishing the implementations of the same
  functionality for different languages. <span class="note">For example,
  <code>libfoo</code> and <code>libfoo.bash</code>.</span></p>

  <p>Package name comparison is case-insensitive but the original case must be
  preserved for display, in file names, etc. <span class="note">The reason for
  case-insensitive comparison is Windows file names.</span></p>

  <p>If the package is a library then it is strongly recommended that you
  start its package name with the <code>lib</code> prefix, for example,
  <code>libfoo</code>. Some package repositories may make this a requirement
  as part of their submission policy.</p>

  <p>If a package (normally a library) supports usage of multiple major
  versions in the same project, then it is recommended to append the major
  version number to the package name starting from version <code>2.0.0</code>,
  for example, <code>libfoo</code> (before <code>2.0.0</code>),
  <code>libfoo2</code>, <code>libfoo3</code> (<code>3.Y.Z</code>), etc.</p>

  <h1 id="package-version">2 Package Version</h1>

  <p>The <code>bpkg</code> package version format tries to balance the need of
  accommodating existing software versions on one hand and providing a
  reasonably straightforward comparison semantics on another. For some
  background on this problem see <code><b>deb-version(1)</b></code> and the <a
  href="http://semver.org">Semantic Versioning</a> specification.</p>

  <p>Note also that if you are strating a new project that will use the
  <code>build2</code> toolchain, then it is strongly recommended that you use
  the <i>standard versioning</i> scheme which is a more strictly defined
  subset of semanic versioning and that allows automation of many version
  management tasks. See <a
  href="../../build2/doc/build2-build-system-manual.xhtml#module-version"><code>version</code>
  Module</a> for details.</p>

  <p>The <code>bpkg</code> package version has the following form:</p>

  <pre>[+&lt;epoch>-]&lt;upstream>[-&lt;prerel>][+&lt;revision>][#&lt;iteration>]</pre>

  <p>The <i>epoch</i> part should be an integer. It can be used to change to a
  new versioning scheme that would be incompatible with the old one. If not
  specified, then <i>epoch</i> defaults to <code>1</code> except for a stub
  version (see below) in which case it defaults to <code>0</code>. The
  explicit zero <i>epoch</i> can be used if the current versioning scheme (for
  example, date-based) is known to be temporary.</p>

  <p>The <i>upstream</i> part is the upstream software version that this
  package is based on. It can only contain alpha-numeric characters and
  <code>.</code>. The <code>.</code> character is used to separate the version
  into <i>components</i>.</p>

  <p>The <i>prerel</i> part is the upstream software pre-release marker, for
  example, alpha, beta, candidate, etc. Its format is the same as for
  <i>upstream</i> except for two special values: the absent <i>prerel</i> (for
  example, <code>1.2.3</code>) signifies the maximum or final release while
  the empty <i>prerel</i> (for example, <code>1.2.3-</code>) signifies the
  minimum or earliest possible release. <span class="note">The minimum release
  is intended to be used for version constraints (for example, <code>libfoo
  &lt; 1.2.3-</code>) rather than actual releases.</span></p>

  <p>The <i>revision</i> part should be an integer. It is used to version
  package releases that are based on the same upstream versions. If not
  specified, then <i>revision</i> defaults to <code>0</code>.</p>

  <p>The <i>iteration</i> part is an integer. It is used internally by
  <code>bpkg</code> to automatically version modifications to the packaging
  information (specifically, to package manifest and lockfile) in <i>external
  packages</i> that have the same upstream version and revision. As a result,
  the <i>iteration</i> cannot not be specified by the user and is only shown
  in the <code>bpkg</code> output (for example, by <code>pkg-status</code>
  command) in order to distinguish between package iterations with otherwise
  identical versions. Note also that <i>iteration</i> is relative to the
  <code>bpkg</code> configuration. Or, in other words, it is an iteration
  number of a package as observed by a specific configuration. As a result,
  two configuration can "see" the same package state as two different
  iterations.</p>

  <div class="note">
  <p>Package iterations are used to support package development during which
  requiring the developer to manually increment the version or revision after
  each modification would be impractical. This mechanism is similar to the
  automatic commit versioning provided by the <i>standard version</i> except
  that it is limited to the packaging information but works for uncommitted
  changes.</p>
  </div>

  <p>Version <code>+0-0-</code> (least possible version) is reserved and
  specifying it explicitly is illegal. <span class="note">Explicitly
  specifying this version does not make much sense since <code>libfoo &lt;
  +0-0-</code> is always false and <code>libfoo > +0-0-</code> is always true.
  In the implementation this value is used as a special empty
  version.</span></p>

  <p>Version <code>0</code> (with a potential revision, for example,
  <code>0+1</code>, <code>0+2</code>) is used to signify a <i>stub
  package</i>. A stub is a package that does not contain source code and can
  only be "obtained" from other sources, for example, a system package
  manager. Note that at some point a stub may be converted into a full-fledged
  package at which point it will be assigned a "real" version. It is assumed
  that this version will always be greater than the stub version.</p>

  <p>When displaying the package version or when using the version to derive
  the file name, the default <i>epoch</i> value as well as zero
  <i>revision</i> and <i>iteration</i> values are omitted (even if they were
  explicitly specified, for instance, in the package manifest). For example,
  <code>+1-1.2.3+0</code> will be used as <code>libfoo-1.2.3</code>.</p>

  <div class="note">
  <p>This versioning scheme and the choice of delimiter characters
  (<code>.-+</code>) is meant to align with semantic versioning.</p>
  </div>

  <p>Some examples of versions:</p>

  <pre>0+1
+0-20180112
1.2.3
1.2.3-a1
1.2.3-b2
1.2.3-rc1
1.2.3-alpha1
1.2.3-alpha.1
1.2.3-beta.1
1.2.3+1
+2-1.2.3
+2-1.2.3-alpha.1+3
+2.2.3#1
1.2.3+1#1
+2-1.2.3+1#2</pre>

  <p>The version sorting order is <i>epoch</i>, <i>upstream</i>,
  <i>prerel</i>, <i>revision</i>, and finally, <i>iteration</i>. The
  <i>upstream</i> and <i>prerel</i> parts are compared from left to right, one
  component at a time, as described next.</p>

  <p>To compare two components, first the component types are determined.  A
  component that only consists of digits is an integer. Otherwise, it is a
  string. If both components are integers, then they are compared as integers.
  Otherwise, they are compared lexicographically and case-insensitively. <span
  class="note">The reason for case-insensitive comparison is Windows file
  names.</span></p>

  <p>A non-existent component is considered 0 if the other component is an
  integer and an empty string if the other component is a string.  For
  example, in <code>1.2</code> vs <code>1.2.0</code>, the third component in
  the first version is 0 and the two versions are therefore equal. As a
  special exception to this rule, an absent <i>prerel</i> part is always
  greater than any non-absent part. <span class="note">And thus making the
  final release always older than any pre-release.</span></p>

  <p>This algorithm gives correct results for most commonly-used versioning
  schemes, for example:</p>

  <pre>1.2.3 &lt; 12.2
1.alpha &lt; 1.beta
20151128 &lt; 20151228
2015.11.28 &lt; 2015.12.28</pre>

  <p>One notable versioning scheme where this approach gives an incorrect
  result is hex numbers (consider <code>A</code> vs <code>1A</code>). The
  simplest work around is to convert such numbers to decimal. Alternatively,
  one can fix the width of the hex number and pad all the values with leading
  zeros, for example: <code>00A</code> vs <code>01A</code>.</p>

  <p>It is also possible to convert the <i>upstream</i> and <i>prerel</i>
  parts into a <i>canonical representation</i> that will produce the correct
  comparison result when always compared lexicographically and as a whole.
  <span class="note">This can be useful, for example, when storing versions in
  the database which would otherwise require a custom collation implementation
  to obtain the correct sort order.</span></p>

  <p>To convert one of these parts to its canonical representation, all its
  string components are converted to the lower case while all its integer
  components are padded with leading zeros to the fixed length of
  <code>16</code> characters, with all trailing zero-only components removed.
  Note that this places an implementation limit on the length of integer
  components which should be checked by the implementation when converting to
  the canonical representation. <span class="note">The <code>16</code>
  characters limit was chosen to still be able to represent (with some spare)
  components in the <i>YYYYMMDDhhmmss</i> form while not (visually) bloating
  the database too much.</span> As a special case, the absent <i>prerel</i>
  part is represented as <code>~</code>. <span class="note">Since the ASCII
  code for <code>~</code> is greater than any other character that could
  appear in <i>prerel</i>, such a string will always be greater than any other
  representation.</span> The empty <i>prerel</i> part is represented as an
  empty string.</p>

  <p>Note that because it is no possible to perform a reverse conversion
  without the possibility of loss (consider <code>01.AA.BB</code>), the
  original parts may also have to be stored, for example, for display, to
  derive package archive names, etc.</p>

  <div class="note">
  <p>In quite a few contexts the implementation needs to ignore the
  <i>revision</i> and/or <i>iteration</i> parts. For example, this is needed
  to implement the semantics of newer revisions/iterations of packages
  replacing their old ones since we do not keep multiple revisions/iterations
  of the same upstream version in the same respository. As a result, in the
  package object model, we have a version key as just {<i>epoch</i>,
  <i>upstream</i>, <i>prerel</i>} but also store the package revision and
  iteration so that it can be shown it to the user, etc.</p>
  </div>

  <h1 id="manifests">3 Manifests</h1>

  <p>This chapter describes the general manifest file format as well as the
  concrete manifests used by <code>bpkg</code>.</p>

  <p>Currently, three manifests are defined: package manifest, repository
  manifest, and signature manifest. The former two manifests can also be
  combined into a list of manifests to form the list of available packages and
  the description of a repository, respectively.</p>

  <h2 id="manifest-format">3.1 Manifest Format</h2>

  <p>The manifest format is a UTF-8 encoded text containing a list of
  name-value pairs in the form:</p>

  <pre>&lt;name>: &lt;value></pre>

  <p>For example:</p>

  <pre>name: libfoo
version: 1.2.3</pre>

  <p>The name can contain any characters except <code>:</code> and
  whitespaces. Newline terminates the pair unless escaped with <code>\</code>
  (see below). Leading and trailing whitespaces before and after name and
  value are ignored except in the multi-line mode (see below).</p>

  <p>If, the first non-whitespace character on the line is <code>#</code>,
  then the rest of the line is treated as a comment and ignored except if the
  preceding newline was escaped or in the multi-line mode (see below). For
  example:</p>

  <pre># This is a comment.
short: This is #not a comment
long: Also \
#not a comment</pre>

  <p>The first name-value pair in the manifest file should always have an
  empty name. The value of this special pair is the manifest format version.
  The version value shall use the default (that is, non-multi-line) mode and
  shall not use any escape sequences. Currently it should be <code>1</code>,
  for example:</p>

  <pre>: 1
name: libfoo
version: 1.2.3</pre>

  <p>Any new name that is added without incrementing the version must be
  optional so that it can be safely ignored by older implementations.</p>

  <p>The special empty name pair can also be used to separate multiple
  manifests. In this case the version may be omitted in the subsequent
  manifests, for example:</p>

  <pre>: 1
name: libfoo
version: 1.2.3
:
name: libbar
version: 2.3.4</pre>

  <p>To disable treating of a newline as a name-value pair terminator we can
  escape it with <code>\</code>. Note that <code>\</code> is only treated as
  an escape sequence when followed by a newline and both are simply removed
  from the stream (as opposed to being replaced which a space). To enter a
  literal <code>\</code> at the end of the value, use the <code>\\</code>
  sequence. For example:</p>

  <pre>description: Long text that doesn't fit into one line \
so it is continued on the next line.</pre>

  <pre>windows-path: C:\foo\bar\\</pre>

  <p>Notice that in the final example only the last <code>\</code> needs
  special handling since it is the only one that is followed by a newline.</p>

  <p>One may notice that in this newline escaping scheme a line consisting of
  just <code>\</code> followed by a newline has no use, except, perhaps, for
  visual presentation of, arguably, dubious value. For example, this
  representation:</p>

  <pre>description: First line. \
\
Second line.</pre>

  <p>Is semantically equivalent to:</p>

  <pre>description: First line. Second line.</pre>

  <p>As a result, such a sequence is "overloaded" to provide more useful
  functionality in two ways: Firstly, if <code>:</code> after the name is
  immediately followed (ignoring whitespaces) by <code>\</code> and a newline,
  then it signals the start of the multi-line mode. In this mode all
  subsequent newlines and <code>#</code> are treated as ordinary characters
  rather than value terminators or comments until a line consisting of just \
  and a newline (the multi-line mode terminator). For example:</p>

  <pre>description:\
First paragraph.
#
Second paragraph.
\</pre>

  <p>Expressed as a C-string, the value in the above example is:</p>

  <pre>"First paragraph.\n#\nSecond paragraph."</pre>

  <div class="note">
  <p>If we didn't expect to ever need to specify a name with an empty value,
  then an empty value could have turned on the multi-line mode, for
  example:</p>

  <pre>description:
First paragraph.
#
Second paragraph.
\</pre>

  <p>There are two reasons we don't do this: we don't want to close the door
  on empty values and we want a more explicit "introductor" for the multi-line
  mode since it is quite different compared to the simple mode.</p>
  </div>

  <p>Note that in the multi-line mode we can still use newline escaping to
  split long lines, for example:</p>

  <pre>description:\
First paragraph that doesn't fit into one line \
so it is continued on the next line.
Second paragraph.
\</pre>

  <p>In the simple (that is, non-multi-line) mode, the sole <code>\</code> and
  newline sequence is overloaded to mean a newline. So the previous example
  can also be represented like this:</p>

  <pre>description: First paragraph that doesn't fit into one \
line so it is continued on the next line.\
\
Second paragraph.</pre>

  <p>Note that the multi-line mode can be used to capture a value with leading
  and/or trailing whitespaces, for example:</p>

  <pre>description:\
  test

\</pre>

  <p>The C-string representing this value is:</p>

  <pre>"  test\n"</pre>

  <p>EOF can be used instead of a newline to terminate both simple and
  multi-line values. For example the following representation results in the
  same value as in the previous example.</p>

  <pre>description:\
  test

&lt;EOF></pre>

  <p>By convention, names are all in lower case and multi-word names are
  separated with <code>-</code>. Note that names are case-sensitive.</p>

  <p>Also by convention, the following name suffixes are used to denote common
  types of values:</p>

  <pre>-file
-url
-email</pre>

  <p>For example:</p>

  <pre>description: Inline description
description-file: README
package-url: http://www.example.com
package-email: john@example.com</pre>

  <p>Other common name suffixes (such as -feed) could be added later.</p>

  <div class="note">
  <p>Generally, unless there is a good reason not to, we keep values
  lower-case (for example, <code>requires</code> values such as
  <code>c++11</code> or <code>linux</code>). An example where we use
  upper/mixed case would be <code>license</code>; it seems unlikely
  <code>gplv2</code> would be better than <code>GPLv2</code>.</p>
  </div>

  <p>A number of name-value pairs described below allow for the value proper
  to be optionally followed by <code>;</code> and a comment. Such comments
  serve as additional documentation for the user and should be full
  sentence(s), that is start with a capital letter and end with a period. Note
  that unlike <code>#</code>-style comments which are ignored, these comments
  are considered to be part of the value. For example:</p>

  <pre>email: foo-users@example.com ; Public mailing list.</pre>

  <p>It is recommended that you keep comments short, single-sentence. Note
  that non-comment semicolons in such values have to be escaped with a
  backslash, for example:</p>

  <pre>url: http://git.example.com/?p=foo\;a=tree</pre>

  <p>In the manifest specifications described below optional components are
  enclosed in square brackets (<code>[]</code>). If the name is enclosed in
  <code>[]</code> then the name-value pair is optional, otherwise &#8211;
  required. For example:</p>

  <pre>name: &lt;name>
license: &lt;licenses> [; &lt;comment>]
[description]: &lt;text></pre>

  <p>In the above example <code>name</code> is required, <code>license</code>
  has an optional component (comment), and <code>description</code> is
  optional.</p>

  <p>In certain situations (for example, shell scripts) it can be easier to
  parse the binary manifest representation. The binary representation does not
  include comments and consists of a sequence of name-value pairs in the
  following form:</p>

  <pre>&lt;name>:&lt;value>\0</pre>

  <p>That is, the name and the value are separated by a colon and each pair
  (including the last) is terminated with the <code>NUL</code> character. Note
  that there can be no leading or trailing whitespace characters around the
  name and any whitespaces after the colon and before the <code>NUL</code>
  terminator are part of the value. Finally, the manifest format versions are
  always explicit (that is, not empty) in binary manifest lists.</p>

  <h2 id="manifest-package">3.2 Package Manifest</h2>

  <p>The package manifest (the <code>manifest</code> file found in the
  package's root directory) describes a <code>bpkg</code> package. The
  manifest synopsis is presented next followed by the detailed description of
  each value in subsequent sections.</p>

  <p>The subset of the values up to and including <code>license</code>
  constitute the package manifest header. Note that the header is a valid
  package manifest since all the other values are optional. There is also no
  requirement for the header values to appear first or to be in a specific
  order. In particular, in a full package manifest they can be interleaved
  with non-header values.</p>

  <pre>name: &lt;name>
version: &lt;version>
[project]: &lt;name>
[priority]: &lt;priority> [; &lt;comment>]
summary: &lt;text>
license: &lt;licenses> [; &lt;comment>]</pre>

  <pre>[topics]: &lt;topics>
[keywords]: &lt;keywords>
[description]: &lt;text>
[description-file]: &lt;path> [; &lt;comment>]
[description-type]: &lt;text-type>
[changes]: &lt;text>
[changes-file]: &lt;path> [; &lt;comment>]

[url]: &lt;url> [; &lt;comment>]
[doc-url]: &lt;url> [; &lt;comment>]
[src-url]: &lt;url> [; &lt;comment>]
[package-url]: &lt;url> [; &lt;comment>]

[email]: &lt;email> [; &lt;comment>]
[package-email]: &lt;email> [; &lt;comment>]
[build-email]: &lt;email> [; &lt;comment>]
[build-warning-email]: &lt;email> [; &lt;comment>]
[build-error-email]: &lt;email> [; &lt;comment>]

[depends]: [?][*] &lt;alternatives> [; &lt;comment>]
[requires]: [?] [&lt;alternatives>] [; &lt;comment>]

[builds]: &lt;class-expr> [; &lt;comment>]
[build-include]: &lt;config>[/&lt;target>] [; &lt;comment>]
[build-exclude]: &lt;config>[/&lt;target>] [; &lt;comment>]</pre>

  <h3 id="manifest-package-name">3.2.1 <code>name</code></h3>

  <pre>name: &lt;name></pre>

  <p>The package name. See <a href="#package-name">Package Name</a> for the
  package name format description. Note that the name case is preserved for
  display, in file names, etc.</p>

  <h3 id="manifest-package-version">3.2.2 <code>version</code></h3>

  <pre>version: &lt;version>
[upstream-version]: &lt;string></pre>

  <p>The package version. See <a href="#package-version">Package Version</a>
  for the version format description. Note that the version case is preserved
  for display, in file names, etc.</p>

  <p>When packaging existing projects, sometimes you may want to deviate from
  the upstream versioning scheme because, for example, it may not be
  representable as a <code>bpkg</code> package version or simply be
  inconvenient to work with. In this case you would need to come up with an
  upstream-to-downstream version mapping and use the
  <code>upstream-version</code> value to preserve the original version for
  information.</p>

  <h3 id="manifest-package-project">3.2.3 <code>project</code></h3>

  <pre>[project]: &lt;name></pre>

  <p>The project this package belongs to. The project name has the same
  restrictions as the package name (see <a href="#package-name">Package
  Name</a> for details) and its case is preserved for display, in directory
  names, etc. If unspecified, then the project name is assumed to be the same
  as the package name.</p>

  <p>Projects are used to group related packages together in order to help
  with organization and discovery in repositories. For example, packages
  <code>hello</code>, <code>libhello</code>, and <code>libhello2</code> could
  all belong to project <code>hello</code>. By convention, projects of library
  packages are named without the <code>lib</code> prefix.</p>

  <h3 id="manifest-package-">3.2.4 <code>priority</code></h3>

  <pre>[priority]: &lt;priority> [; &lt;comment>]

&lt;priority> = security | high | medium | low</pre>

  <p>The release priority (optional). As a guideline, use
  <code>security</code> for security fixes, <code>high</code> for critical bug
  fixes, <code>medium</code> for important bug fixes, and <code>low</code> for
  minor fixes and/or feature releases. If not specified, <code>low</code> is
  assumed.</p>

  <h3 id="manifest-package-summary">3.2.5 <code>summary</code></h3>

  <pre>summary: &lt;text></pre>

  <p>The short description of the package.</p>

  <h3 id="manifest-package-license">3.2.6 <code>license</code></h3>

  <pre>license: &lt;licenses> [; &lt;comment>]

&lt;licenses> = &lt;license> [, &lt;license>]*</pre>

  <p>The package license. The format is a comma-separated list of
  case-insensitive license names under which this package is distributed. This
  list has the <i>AND</i> semantics, that is, the user must comply with all
  the licenses listed. To capture alternative licensing options use multiple
  <code>license</code> values, for example:</p>

  <pre>license: LGPLv2.1, MIT
license: BSD3</pre>

  <p>In the above example, the package can be used either under the BSD3
  license or both LGPLv2.1 and MIT.</p>

  <p>For complex licensing schemes it is recommended to add comments as an aid
  to the user, for example:</p>

  <pre>license: LGPLv2.1, MIT ; If linking with GNU TLS.
license: BSD3          ; If linking with OpenSSL.</pre>

  <p>To assist automated processing, the following pre-defined names should be
  used for the common licenses:</p>

  <pre>MIT          ; MIT License.
BSD2         ; Simplified 2-clause BSD License.
BSD3         ; New 3-clause BSD License.
BSD4         ; Original 4-clause BSD License.
GPLv2        ; GNU General Public License v2.0.
GPLv3        ; GNU General Public License v3.0.
LGPLv2       ; GNU Lesser General Public License v2.0.
LGPLv2.1     ; GNU Lesser General Public License v2.1.
LGPLv3       ; GNU Lesser General Public License v3.0.
AGPLv2       ; Affero General Public License v2.0.
AGPLv3       ; GNU Affero General Public License v3.0.
ASLv1        ; Apache License v1.0.
ASLv1.1      ; Apache License v1.1.
ASLv2        ; Apache License v2.0.
MPLv2        ; Mozilla Public License v2.0.

public domain
available source ; Not free software/open source.
proprietary
TODO             ; License is not yet decided.</pre>

  <p>Note that just <code>BSD</code> is ambiguous and should be avoided.</p>

  <div class="note">
  <p>An example of automated processing would be filtering for non-copyleft
  licensed packages.</p>
  </div>

  <h3 id="manifest-package-topics">3.2.7 <code>topics</code></h3>

  <pre>[topics]: &lt;topics>

&lt;topics> = &lt;topic> [, &lt;topic>]*</pre>

  <p>The package topics (optional). The format is a comma-separated list of up
  to five potentially multi-word concepts that describe this package. For
  example:</p>

  <pre>topics: xml parser, xml serializer</pre>

  <h3 id="manifest-package-keywords">3.2.8 <code>keywords</code></h3>

  <pre>[keywords]: &lt;keywords>

&lt;keywords> = &lt;keyword> [ &lt;keyword>]*</pre>

  <p>The package keywords (optional). The format is a space-separated list of
  up to five words that describe this package. Note that the package and
  project names as well as words from its summary are already considered to be
  keywords and need not be repeated in this value.</p>

  <h3 id="manifest-package-description">3.2.9 <code>description</code></h3>

  <pre>[description]: &lt;text>
[description-file]: &lt;path> [; &lt;comment>]
[description-type]: &lt;text-type></pre>

  <p>The detailed description of the package. It can be provided either inline
  as a text fragment or by referring to a file within a package (e.g.,
  <code>README</code>), but not both.</p>

  <p>In the web interface (<code>brep</code>) the description is displayed
  according to its type. Currently, pre-formatted plain text, <a
  href="https://github.github.com/gfm">GitHub-Flavored Markdown</a>, and <a
  href="https://spec.commonmark.org/current">CommonMark</a> are supported with
  the following <code>description-type</code> values, respectively:</p>

  <pre>text/plain
text/markdown;variant=GFM
text/markdown;variant=CommonMark</pre>

  <p>If just <code>text/markdown</code> is specified, then the GitHub-Flavored
  Markdown (which is a superset of CommonMark) is assumed.</p>

  <p>If the description type is not explicitly specified and the description
  is specified as <code>description-file</code>, then an attempt to derive the
  type from the file extension is made. Specifically, the
  <code><b>.md</b></code> and <code><b>.markdown</b></code> extensions are
  mapped to <code>text/markdown</code>, the <code><b>.txt</b></code> and no
  extension are mapped to <code>text/plain</code>, and all other extensions
  are treated as an unknown type, similar to unknown
  <code>description-type</code> values. And if the description is not
  specified as a file, <code>text/plain</code> is assumed.</p>

  <h3 id="manifest-package-changes">3.2.10 <code>changes</code></h3>

  <pre>[changes]: &lt;text>
[changes-file]: &lt;path> [; &lt;comment>]</pre>

  <p>The description of changes in the release.</p>

  <div class="note">
  <p>The tricky aspect is what happens if the upstream release stays the same
  (and has, say, a <code>NEWS</code> file to which we point) but we need to
  make another package release, for example, to apply a critical patch.</p>
  </div>

  <p>Multiple <code>changes</code> values can be present which are all
  concatenated in the order specified, that is, the first value is considered
  to be the most recent (similar to <code>ChangeLog</code> and
  <code>NEWS</code> files). For example:</p>

  <pre>changes: 1.2.3-2: applied upstream patch for critical bug bar
changes: 1.2.3-1: applied upstream patch for critical bug foo
changes-file: NEWS</pre>

  <p>Or:</p>

  <pre>changes:\
1.2.3-2
  - applied upstream patch for critical bug bar
  - regenerated documentation

1.2.3-1
  - applied upstream patch for critical bug foo
\
changes-file: NEWS</pre>

  <p>In the web interface (<code>brep</code>) the changes are displayed as
  pre-formatted plain text, similar to the package description.</p>

  <h3 id="manifest-package-url">3.2.11 <code>url</code></h3>

  <pre>[url]: &lt;url> [; &lt;comment>]</pre>

  <p>The project home page URL.</p>

  <h3 id="manifest-package-doc-url">3.2.12 <code>doc-url</code></h3>

  <pre>[doc-url]: &lt;url> [; &lt;comment>]</pre>

  <p>The project documentation URL.</p>

  <h3 id="manifest-package-src-url">3.2.13 <code>src-url</code></h3>

  <pre>[src-url]: &lt;url> [; &lt;comment>]</pre>

  <p>The project source repository URL.</p>

  <h3 id="manifest-package-package-url">3.2.14 <code>package-url</code></h3>

  <pre>[package-url]: &lt;url> [; &lt;comment>]</pre>

  <p>The package home page URL. If not specified, then assumed to be the same
  as <code>url</code>. It only makes sense to specify this value if the
  project and package are maintained separately.</p>

  <h3 id="manifest-package-email">3.2.15 <code>email</code></h3>

  <pre>[email]: &lt;email> [; &lt;comment>]</pre>

  <p>The project email address. For example, a support mailing list.</p>

  <h3 id="manifest-package-package-email">3.2.16
  <code>package-email</code></h3>

  <pre>[package-email]: &lt;email> [; &lt;comment>]</pre>

  <p>The package email address. If not specified, then assumed to be the same
  as <code>email</code>. It only makes sense to specify this value if the
  project and package are maintained separately.</p>

  <h3 id="manifest-package-build-email">3.2.17 <code>build-email</code></h3>

  <pre>[build-email]: &lt;email> [; &lt;comment>]</pre>

  <p>The build notification email address. It is used to send build result
  notifications by automated build bots. If none of the
  <code>build-*email</code> values are specified, then it is assumed to be the
  same as <code>package-email</code>. If it is specified but empty, then no
  build result notifications for this package are sent by email.</p>

  <h3 id="manifest-package-warning-email">3.2.18
  <code>build-warning-email</code></h3>

  <pre>[build-warning-email]: &lt;email> [; &lt;comment>]</pre>

  <p>The build warning notification email address. Unlike
  <code>build-email</code>, only build warning and error notifications are
  sent to this email.</p>

  <h3 id="manifest-package-error-email">3.2.19
  <code>build-error-email</code></h3>

  <pre>[build-error-email]: &lt;email> [; &lt;comment>]</pre>

  <p>The build error notification email address. Unlike
  <code>build-email</code>, only build error notifications are sent to this
  email.</p>

  <h3 id="manifest-package-depends">3.2.20 <code>depends</code></h3>

  <pre>[depends]: [?][*] &lt;alternatives> [; &lt;comment>]

&lt;alternatives> := &lt;dependency> [ '|' &lt;dependency>]*
&lt;dependency>   := &lt;name> [&lt;constraint>]
&lt;constraint>   := &lt;comparison> | &lt;shortcut> | &lt;range>
&lt;comparison>   := ('==' | '>' | '&lt;' | '>=' | '&lt;=') &lt;version>
&lt;shortcut>     := ('^' | '~') &lt;version>
&lt;range>        := ('(' | '[') &lt;version> &lt;version> (')' | ']')</pre>

  <p>The prerequisite packages. If the <code>depends</code> value start with
  <code>*</code>, then it is a <i>build-time</i> prerequisite. Otherwise it is
  <i>run-time</i>.</p>

  <div class="note">
  <p>Most of the build-time prerequisites are expected to be tools such as
  code generator, so you can think of <code>*</code> as the executable mark
  printed by <code>ls</code>. An important difference between the two kind of
  dependencies is that in case of cross-compilation a build-time dependency
  must be built for the build machine, not the target.</p>
  </div>

  <p>Two special build-time dependency names are recognized and checked in an
  ad hoc manner: <code>build2</code> (the <code>build2</code> build system)
  and <code>bpkg</code> (the <code>build2</code> package manager). This allows
  us to specify the required build system and package manager versions, for
  example:</p>

  <pre>depends: * build2 >= 0.6.0
depends: * bpkg >= 0.6.0</pre>

  <p>Each <code>depends</code> value can specify multiple packages with the
  <i>OR</i> semantics. While multiple <code>depends</code> values are used to
  specify multiple packages with the <i>AND</i> semantics. A value that starts
  with <code>?</code> is a conditional prerequisite. Whether such a
  prerequisite will be in effect can only be determined at the package
  configuration time. It is recommended that you provide a comment for each
  conditional prerequisite as an aid to the user. For example:</p>

  <pre>depends: libz
depends: libfoo ~1.2.0 ; Only works with libfoo 1.2.*.
depends: libgnutls >= 1.2.3 | libopenssl >= 2.3.4
depends: ? libboost-regex >= 1.52.0 ; Only if no C++11 &lt;regex>.
depends: ? libqtcore >= 5.0.0 ; Only if GUI is enabled.</pre>

  <p>It is recommended that you specify unconditional dependencies first with
  simple (no alternatives) dependencies leading each set.</p>

  <p>The optional version constraint can be specified using comparison
  operators, shortcut (to range) operators, and ranges.</p>

  <p>The shortcut operators can only be used with <a
  href="../../build2/doc/build2-build-system-manual.xhtml#module-version">standard
  versions</a> (a semantic version without the pre-release part is a standard
  version). They are equivalent to the following ranges. <span
  class="note">The <code>X.Y.Z-</code> version signifies the earliest
  pre-release in the <code>X.Y.Z</code> series; see <a
  href="#package-version">Package Version</a> for details</span>.</p>

  <pre>~X.Y.Z  [X.Y.Z  X.Y+1.0-)

^X.Y.Z  [X.Y.Z  X+1.0.0-)  if X >  0
^0.Y.Z  [0.Y.Z  0.Y+1.0-)  if X == 0</pre>

  <p>That is, the tilde (<code>~</code>) constraint allows upgrades to any
  further patch version while the caret (<code>^</code>) constraint &#8211;
  also to any further minor version.</p>

  <div class="note">
  <p>Zero major version component is customarily used during early development
  where the minor version effectively becomes major. As a result, the tilde
  constraint has special semantics for this case.</p>
  </div>

  <p>Note that the shortuct operators can only be used with the complete,
  three-component versions (<code>X.Y.Z</code> with the optional pre-release
  part per the standard version). Specifically, there is no support for
  special <code>^X.Y</code> or <code>~X</code> semantics offered by some
  package manager &#8211; if desired, such functionality can be easily
  achieved with ranges. Also, the <code>0.0.Z</code> version is not considered
  special except as having zero major component for the tilde semantics
  discussed above.</p>

  <p>Note also that pre-releases do not required any special considerations
  when used with the shortcut operators. For example, if package
  <code>libfoo</code> is usable starting with the second beta of the
  <code>2.0.0</code> release, then our constraint could be expressed as:</p>

  <pre>depends: libfoo ^2.0.0-b.2</pre>

  <div class="note">
  <p>Internally shortucts and comparisons can be represented as ranges (that
  is, <code>[v, v]</code> for <code>==</code>, <code>(v, inf)</code> for
  <code>></code>, etc). However, for display and serialization such
  representations should be converted back to simple operators. While it is
  possible that the original manifest specified equality or shortucts as full
  ranges, it is acceptable to display/serialize them as simpler operators.</p>
  </div>

  <p>Instead of a specific version, the constraint can be specified in terms
  of the dependent package's version (that is, its <a
  href="#manifest-package-version"><code>version</code></a> value) using the
  special <code>$</code> value. A <code>depends</code> value that contains
  <code>$</code> is called incomplete. This mechanism is primarily useful when
  developing related packages that should track each other's versions exactly
  or closely. For example:</p>

  <pre>name: sqlite3
version: 3.18.2
depends: libsqlite3 == $</pre>

  <p>In comparison operators and ranges the <code>$</code> value is replaced
  with the dependent version ignoring the revision. For shortcut operators,
  the dependent version must be a standard version and the following
  additional processing is applied depending on whether the version is a
  release, final pre-release, or a snapshot pre-release.</p>

  <ol>
  <li>For a release we set the min version patch to zero. For <code>^</code>
  we also set the minor version to zero, unless the major version is zero
  (reduces to <code>~</code>). The max version is set according to the
  standard shortcut logic. For example, <code>~$</code> is completed as
  follows:

  <pre>1.2.0 -> [1.2.0 1.3.0-)
1.2.1 -> [1.2.0 1.3.0-)
1.2.2 -> [1.2.0 1.3.0-)</pre>

  <p>And <code>^$</code> is completed as follows:</p>

  <pre>1.0.0 -> [1.0.0 2.0.0-)
1.1.1 -> [1.0.0 2.0.0-)</pre></li>

  <li>For a final pre-release the key observation is that if the patch
  component for <code>~</code> or minor and patch components for
  <code>^</code> are not zero, then that means there has been a compatible
  release and we treat this case the same as release, ignoring the pre-release
  part. If, however, it/they are zero, then that means there may yet be no
  final release and we have to start from the first alpha. For example, for
  the <code>~$</code> case:

  <pre>1.2.0-a.1 -> [1.2.0-a.1 1.3.0-)
1.2.0-b.2 -> [1.2.0-a.1 1.3.0-)
1.2.1-a.1 -> [1.2.0     1.3.0-)
1.2.2-b.2 -> [1.2.0     1.3.0-)</pre>

  <p>And for the <code>^$</code> case:</p>

  <pre>1.0.0-a.1 -> [1.0.0-a.1 2.0.0-)
1.0.0-b.2 -> [1.0.0-a.1 2.0.0-)
1.0.1-a.1 -> [1.0.0     2.0.0-)
1.1.0-b.2 -> [1.0.0     2.0.0-)</pre></li>

  <li>For a snapshot pre-release we distinguish two cases: a patch snapshot
  (the patch component is not zero) and a major/minor snapshot (the patch
  component is zero). For the patch snapshot case we assume that it is (most
  likely) developed independently of the dependency and we treat it the same
  as the final pre-release case. For example, if the dependent version is
  <code>1.2.1-a.0.nnn</code>, the dependency could be <code>1.2.0</code> or
  <code>1.2.2</code> (or somewhere in-between).

  <p>For the major/minor snapshot we assume that all the packages are
  developed in the lockstep and have the same <code>X.Y.0</code> version. In
  this case we make the range start from the earliest possible version in this
  "snapshot series" and end before the final pre-release. For example (in this
  case <code>~</code> and <code>^</code> are treated the same):</p>

  <pre>1.2.0-a.0.nnn -> [1.2.0-a.0.1 1.2.0-a.1)
2.0.0-b.2.nnn -> [2.0.0-b.2.1 2.0.0-b.3)</pre></li>
  </ol>

  <h3 id="manifest-package-requires">3.2.21 <code>requires</code></h3>

  <pre>[requires]: [?] [&lt;alternatives>] [; &lt;comment>]

&lt;alternatives> := &lt;requirement> [ '|' &lt;requirement>]*
&lt;requirement>  := &lt;id> | &lt;dependency></pre>

  <p>The package requirements (other than other packages). Such requirements
  are normally checked during package configuration by the build system and
  the only purpose of capturing them in the manifest is for documentation.
  Similar to <code>depends</code>, a value that starts with <code>?</code> is
  a conditional requirement. For example:</p>

  <pre>requires: linux | windows | macosx
requires: c++11
requires: ? ; VC 15 or later if targeting Windows.
requires: ? ; libc++ if using Clang on Mac OS.</pre>

  <p>Notice that in the last two cases the id is omitted altogether with only
  the comment specifying the requirement.</p>

  <p>Note that <code>requires</code> should also be used to specify
  dependencies on external libraries, that is, the ones not packaged or not in
  the repository. In this case it may make sense to also specify the version
  constraint. For example:</p>

  <pre>requires: zlib >= 1.2.0 ; Most systems already have it or get from zlib.net.</pre>

  <p>It is recommended that you specify unconditional requirements first with
  simple (no alternatives) requirements leading each set.</p>

  <p>To assist automated processing, the following pre-defined ids should be
  used for the common requirements:</p>

  <pre>c++98
c++03
c++11
c++14
c++17
c++20
c++23</pre>

  <pre>posix
linux
macos
freebsd
windows</pre>

  <pre>gcc[_X.Y.Z]  ; For example: gcc_6, gcc_4.9, gcc_5.0.0
clang[_X.Y]  ; For example: clang_6, clang_3.4, clang_3.4.1
msvc[_NU]    ; For example: msvc_14, msvc_15u3</pre>

  <h3 id="manifest-package-builds">3.2.22 <code>builds</code></h3>

  <pre>[builds]: [&lt;class-uset> ':' ] [&lt;class-expr>] [; &lt;comment>]

&lt;class-uset> := &lt;class-name> [ &lt;class-name>]*
&lt;class-expr> := &lt;class-term> [ &lt;class-term>]*
&lt;class-term> := ('+'|'-'|'&amp;')['!'](&lt;class-name> | '(' &lt;class-expr> ')')</pre>

  <p>The package build configurations. They specify the build configuration
  classes the package should or should not be built for by automated build
  bots. For example:</p>

  <pre>builds: -windows</pre>

  <p>Build configurations can belong to multiple classes with their names and
  semantics varying between different build bot deployments. However, the
  pre-defined <code>none</code>, <code>default</code>, and <code>all</code>
  classes are always provided. If no <code>builds</code> value is specified in
  the package manifest, then the <code>default</code> class is assumed.</p>

  <div class="note">
  <p>A build configuration class can also derive from another class in which
  case configurations that belong to the derived class are treated as also
  belonging to the base class (or classes, recursively). See the Build
  Configurations page of the build bot deployment for the list of available
  build configurations and their classes.</p>
  </div>

  <p>The <code>builds</code> value consists of an optional underlying class
  set (<code>&lt;class-uset></code>) followed by a class set expression
  (<code>&lt;class-expr></code>). The underlying set is a space-separated list
  of class names that define the set of build configurations to consider. If
  not specified, then all the configurations belonging to the
  <code>default</code> class are assumed. The class set expression can then be
  used to exclude certain configurations from this initial set.</p>

  <p>The class expression is a space-separated list of terms that are
  evaluated from left to right. The first character of each term determines
  whether the build configuration that belong to its set are added to
  (<code>+</code>), subtracted from (<code>-</code>), or intersected with
  (<code>&amp;</code>) the current set. If the second character in the term is
  <code>!</code>, then its set of configuration is inverted against the
  underlying set. The term itself can be either the class name or a
  parenthesized expression. Some examples:</p>

  <pre>builds: none                     ; None.
builds: all                      ; All.
builds: default legacy           ; Default and legacy.
builds: -windows                 ; Default except Windows.
builds: all : -windows           ; All except Windows.
builds: all : &amp;gcc               ; All with GCC only.
builds: all : &amp;gcc-8+            ; All with GCC 8 and up only.
builds: gcc : -optimized         ; GCC without optimization.
builds: gcc : &amp;( +linux +macos ) ; GCC on Linux or Mac OS.</pre>

  <p>Notice that the colon and parentheses must be separated with spaces from
  both preceding and following terms.</p>

  <p>Multiple <code>builds</code> values are evaluated in the order specified
  and as if they were all part of a single expression. Only the first value
  may specify the underlying set. The main reason for having multiple values
  is to provide individual reasons (as the <code>builds</code> value comments)
  for different parts of the expression. For example:</p>

  <pre>builds: default experimental ; Only modern compilers are supported.
builds: -gcc                 ; GCC is not supported.
builds: -clang               ; Clang is not supported.</pre>

  <div class="note">
  <p>The <code>builds</code> value comments are used by the web interface
  (<code>brep</code>) to display the reason for the build configuration
  exclusion.</p>
  </div>

  <p>After evaluating all the <code>builds</code> values, the final
  configuration set can be further fine-tuned using the <a
  href="#manifest-package-include-exclude"><code>build-{include,exclude}</code></a>
  patterns.</p>

  <h3 id="manifest-package-include-exclude">3.2.23
  <code>build-{include,exclude}</code></h3>

  <pre>[build-include]: &lt;config>[/&lt;target>] [; &lt;comment>]
[build-exclude]: &lt;config>[/&lt;target>] [; &lt;comment>]</pre>

  <p>The package build inclusions and exclusions. The
  <code>build-include</code> and <code>build-exclude</code> values further
  reduce the configuration set produced by evaluating the <a
  href="#manifest-package-builds"><code>builds</code></a> values. The
  <i>config</i> and <i>target</i> values are filesystem wildcard patterns
  which are matched against the build configuration names and target names
  (see the <code>bbot</code> documentation for details). In particular, the
  <code>*</code> wildcard matches zero or more characters within the name
  component while the <code>**</code> sequence matches across the components.
  Plus, wildcard-only pattern components match absent name components. For
  example:</p>

  <pre>build-exclude: windows**     # matches windows_10-msvc_15
build-exclude: macos*-gcc**  # matches macos_10.13-gcc_8.1-O3
build-exclude: linux-gcc*-*  # matches linux-gcc_8.1 and linux-gcc_8.1-O3</pre>

  <p>The exclusion and inclusion patterns are applied in the order specified
  with the first match determining whether the package will be built for this
  configuration and target. If none of the patterns match (or none we
  specified), then the package is built.</p>

  <p>As an example, the following value will exclude 32-bit builds for the
  MSVC 14 compiler:</p>

  <pre>build-exclude: *-msvc_14**/i?86-** ; Linker crash.</pre>

  <p>As another example, the following pair of values will make sure that a
  package is only built on Linux:</p>

  <pre>build-include: linux**
build-exclude: ** ; Only supported on Linux.</pre>

  <p>Note that the comment of the matching exclusion is used by the web
  interface (<code>brep</code>) to display the reason for the build
  configuration exclusion.</p>

  <h2 id="manifest-package-list-pkg">3.3 Package List Manifest for
  <code><b>pkg</b></code> Repositories</h2>

  <p>The package list manifest (the <code>packages.manifest</code> file found
  in the <code><b>pkg</b></code> repository root directory) describes the list
  of packages available in the repository. First comes a manifest that
  describes the list itself (referred to as the list manifest). The list
  manifest synopsis is presented next:</p>

  <pre>sha256sum: &lt;sum></pre>

  <p>After the list manifest comes a (potentially empty) sequence of package
  manifests. These manifests shall not contain any <code>*-file</code> or
  incomplete <a href="#manifest-package-depends"><code>depends</code></a>
  values (such values should be converted to their inline versions or
  completed, respectively) but must contain the following additional (to
  package manifest) values:</p>

  <pre>location: &lt;path>
sha256sum: &lt;sum></pre>

  <p>The detailed description of each value follows in the subsequent
  sections.</p>

  <h3 id="manifest-package-list-pkg-sha256sum">3.3.1 <code>sha256sum</code>
  (list manifest)</h3>

  <pre>sha256sum: &lt;sum></pre>

  <p>The SHA256 checksum of the <code>repositories.manifest</code> file
  (described below) that corresponds to this repository. The <i>sum</i> value
  should be 64 characters long (that is, just the SHA256 value, no file name
  or any other markers), be calculated in the binary mode, and use lower-case
  letters.</p>

  <div class="note">
  <p>This checksum is used to make sure that the
  <code>repositories.manifest</code> file that was fetched is the same as the
  one that was used to create the <code>packages.manifest</code> file. This
  also means that if <code>repositories.manifest</code> is modified in any
  way, then <code>packages.manifest</code> must be regenerated as well.</p>
  </div>

  <h3 id="manifest-package-list-pkg-package-location">3.3.2
  <code>location</code> (package manifest)</h3>

  <pre>location: &lt;path></pre>

  <p>The path to the package archive file relative to the repository root. It
  should be in the POSIX representation.</p>

  <div class="note">
  <p>if the repository keeps multiple versions of the package and places them
  all into the repository root directory, it can get untidy. With
  <code>location</code> we allow for sub-directories.</p>
  </div>

  <h3 id="manifest-package-list-pkg-package-sha256sum">3.3.3
  <code>sha256sum</code> (package manifest)</h3>

  <pre>sha256sum: &lt;sum></pre>

  <p>The SHA256 checksum of the package archive file. The <i>sum</i> value
  should be 64 characters long (that is, just the SHA256 value, no file name
  or any other markers), be calculated in the binary mode, and use lower-case
  letters.</p>

  <h2 id="manifest-package-list-dir">3.4 Package List Manifest for
  <code><b>dir</b></code> Repositories</h2>

  <p>The package list manifest (the <code>packages.manifest</code> file found
  in the <code><b>dir</b></code> repository root directory) describes the list
  of packages available in the repository. It is a (potentially empty)
  sequence of manifests with the following synopsis:</p>

  <pre>location: &lt;path>
[fragment]: &lt;string></pre>

  <p>The detailed description of each value follows in the subsequent
  sections. The <code>fragment</code> value can only be present in a merged
  <code>packages.manifest</code> file for a multi-fragment repository.</p>

  <p>As an example, if our repository contained the <code>src/</code>
  subdirectory that in turn contained the <code>libfoo</code> and
  <code>foo</code> packages, then the corresponding
  <code>packages.manifest</code> file could look like this:</p>

  <pre>: 1
location: src/libfoo/
:
location: src/foo/</pre>

  <h3 id="manifest-package-list-dir-location">3.4.1 <code>location</code></h3>

  <pre>location: &lt;path></pre>

  <p>The path to the package directory relative to the repository root. It
  should be in the POSIX representation.</p>

  <h3 id="manifest-package-list-dir-fragment">3.4.2 <code>fragment</code></h3>

  <pre>[fragment]: &lt;string></pre>

  <p>The repository fragment id this package belongs to.</p>

  <h2 id="manifest-repository">3.5 Repository Manifest</h2>

  <p>The repository manifest (only used as part of the repository manifest
  list described below) describes a <code><b>pkg</b></code>,
  <code><b>dir</b></code>, or <code><b>git</b></code> repository. The manifest
  synopsis is presented next followed by the detailed description of each
  value in subsequent sections.</p>

  <pre>[location]: &lt;uri>
[type]: pkg|dir|git
[role]: base|prerequisite|complement
[trust]: &lt;fingerprint>
[url]: &lt;url>
[email]: &lt;email> [; &lt;comment>]
[summary]: &lt;text>
[description]: &lt;text>
[certificate]: &lt;pem>
[fragment]: &lt;string></pre>

  <p>See also the Repository Chaining documentation for further information @@
  TODO.</p>

  <h3 id="manifest-repository-location">3.5.1 <code>location</code></h3>

  <pre>[location]: &lt;uri></pre>

  <p>The repository location. The location can only and must be omitted for
  the base repository. <span class="note">Since we got hold of its manifest,
  then we presumably already know the location of the base repository.</span>
  If the location is a relative path, then it is treated as relative to the
  base repository location.</p>

  <p>For the <code><b>git</b></code> repository type the relative location
  does not inherit the URL fragment from the base repository. Note also that
  the remote <code><b>git</b></code> repository locations normally have the
  <code><b>.git</b></code> extension that is stripped when a repository is
  cloned locally. To make the relative locations usable in both contexts, the
  <code><b>.git</b></code> extension should be ignored if the local
  prerequisite repository with the extension does not exist while the one
  without the extension does.</p>

  <p>While POSIX systems normally only support POSIX paths (that is, forward
  slashes only), Windows is generally able to handle both slash types. As a
  result, it is recommended that POSIX paths are always used in the
  <code>location</code> values, except, perhaps, if the repository is
  explicitly Windows-only by, for example, having a location that is an
  absolute Windows path with the drive letter. <span class="note">The
  <code><b>bpkg</b></code> package manager will always try to represent the
  location as a POSIX path and only fallback to the native representation if
  that is not possible (for example, there is a drive letter in the
  path).</span></p>

  <h3 id="manifest-repository-type">3.5.2 <code>type</code></h3>

  <pre>[type]: pkg|dir|git</pre>

  <p>The repository type. The type must be omitted for the base repository. If
  the type is omitted for a prerequisite/complement repository, then it is
  guessed from its <code>location</code> value as described in <a
  href="bpkg-rep-add.xhtml"><code><b>bpkg-rep-add(1)</b></code></a>.</p>

  <h3 id="manifest-repository-role">3.5.3 <code>role</code></h3>

  <pre>[role]: base|prerequisite|complement</pre>

  <p>The repository role. The <code>role</code> value can be omitted for the
  base repository only.</p>

  <h3 id="manifest-repository-trust">3.5.4 <code>trust</code></h3>

  <pre>[trust]: &lt;fingerprint></pre>

  <p>The repository fingerprint to trust. The <code>trust</code> value can
  only be specified for prerequisite and complement repositories and only for
  repository types that support authentication (currently only
  <code>pkg</code>). The <i>fingerprint</i> value should be an SHA256
  repository fingerprint represented as 32 colon-separated hex digit pairs.
  <span class="note">The repository in question is only trusted for use as a
  prerequisite or complement of this repository. If it is also used by other
  repositories or is added to the configuration by the user, then such uses
  cases are authenticated independently.</span></p>

  <h3 id="manifest-repository-url">3.5.5 <code>url</code></h3>

  <pre>[url]: &lt;url></pre>

  <p>The repository's web interface (<code>brep</code>) URL. It can only be
  specified for the base repository (the web interface URLs for
  prerequisite/complement repositories can be extracted from their respective
  manifests).</p>

  <p>For example, given the following <code>url</code> value:</p>

  <pre>url: https://example.org/hello/</pre>

  <p>The package details page for <code>libfoo</code> located in this
  repository will be <code>https://example.org/hello/libfoo</code>.</p>

  <p>The web interface URL can also be specified as relative to the repository
  location (the <code>location</code> value). In this case <i>url</i> should
  start with two path components each being either <code>.</code> or
  <code>..</code>. If the first component is <code>..</code>, then the
  <code>www</code>, <code>pkg</code> or <code>bpkg</code> domain component, if
  any, is removed from the <code>location</code> URL host, just like when
  deriving the repository name.</p>

  <p>Similarly, if the second component is <code>..</code>, then the
  <code>pkg</code> or <code>bpkg</code> path component, if any, is removed
  from the <code>location</code> URL path, again, just like when deriving the
  repository name.</p>

  <p>Finally, the version component is removed from the <code>location</code>
  URL path, the rest (after the two <code>.</code>/<code>..</code> components)
  of the <code>url</code> value is appended to it, and the resulting path is
  normalized with all remaining <code>..</code>  and <code>.</code> applied
  normally.</p>

  <p>For examples, assuming repository location is:</p>

  <pre>https://pkg.example.org/test/pkg/1/hello/stable</pre>

  <p>The following listing shows some of the possible combinations (the
  <code>&lt;></code> marker is used to highlight the changes):</p>

  <pre>./.          ->  https://pkg.example.org/test/pkg/hello/stable
../.         ->  https://&lt;  >example.org/test/pkg/hello/stable
./..         ->  https://pkg.example.org/test/&lt;  >hello/stable
../..        ->  https://&lt;  >example.org/test/&lt;  >hello/stable
././..       ->  https://pkg.example.org/test/pkg/hello&lt;     >
../../../..  ->  https://&lt;  >example.org/test&lt;               ></pre>

  <div class="note">
  <p>The rationale for the relative web interface URLs is to allow deployment
  of the same repository to slightly different configuration, for example,
  during development, testing, and public use. For instance, for development
  we may use the <code>https://example.org/pkg/</code> setup while in
  production it becomes <code>https://pkg.example.org/</code>. By specifying
  the web interface location as, say, <code>../.</code>, we can run the web
  interface at these respective locations using a single repository
  manifest.</p>
  </div>

  <h3 id="manifest-repository-email">3.5.6 <code>email</code></h3>

  <pre>[email]: &lt;email> [; &lt;comment>]</pre>

  <p>The repository email address. It must and can only be specified for the
  base repository. The email address is displayed by the web interface
  (<code>brep</code>) in the repository about page and could be used to
  contact the maintainers about issues with the repository.</p>

  <h3 id="manifest-repository-summary">3.5.7 <code>summary</code></h3>

  <pre>[summary]: &lt;text></pre>

  <p>The short description of the repository. It must and can only be
  specified for the base repository.</p>

  <h3 id="manifest-repository-description">3.5.8 <code>description</code></h3>

  <pre>[description]: &lt;text></pre>

  <p>The detailed description of the repository. It can only be specified for
  the base repository.</p>

  <p>In the web interface (<code>brep</code>) the description is formatted
  into one or more paragraphs using blank lines as paragraph separators.
  Specifically, it is not represented as <code>&lt;pre></code> so any kind of
  additional plain text formatting (for example, lists) will be lost and
  should not be used in the description.</p>

  <h3 id="manifest-repository-certificate">3.5.9 <code>certificate</code></h3>

  <pre>[certificate]: &lt;pem></pre>

  <p>The X.509 certificate for the repository. It should be in the PEM format
  and can only be specified for the base repository. Currently only used for
  the <code><b>pkg</b></code> repository type.</p>

  <p>The certificate should contain the <code>CN</code> and <code>O</code>
  components in the subject as well as the <code>email:</code> component in
  the subject alternative names. The <code>CN</code> component should start
  with <code>name:</code> and continue with the repository name
  prefix/wildcard (without trailing slash) that will be used to verify the
  repository name(s) that are authenticated with this certificate. See <a
  href="bpkg-repository-signing.xhtml"><code><b>bpkg-repository-signing(1)</b></code></a>
  for details.</p>

  <p>If this value is present then the <code>packages.manifest</code> file
  must be signed with the corresponding private key and the signature saved in
  the <code>signature.manifest</code> file. See <a
  href="#manifest-signature-pkg">Signature Manifest</a> for details.</p>

  <h3 id="manifest-repository-fragment">3.5.10 <code>fragment</code></h3>

  <pre>[fragment]: &lt;string></pre>

  <p>The repository fragment id this repository belongs to.</p>

  <h2 id="manifest-repository-list">3.6 Repository List Manifest</h2>

  <p>@@ TODO See the Repository Chaining document for more information on the
  terminology and semantics.</p>

  <p>The repository list manifest (the <code>repositories.manifest</code> file
  found in the repository root directory) describes the repository. It is a
  sequence of repository manifests consisting of the base repository manifest
  (that is, the manifest for the repository that is being described) as well
  as manifests for its prerequisite and complement repositories. The
  individual repository manifests can appear in any order and the base
  repository manifest can be omitted.</p>

  <p>The <code>fragment</code> values can only be present in a merged
  <code>repositories.manifest</code> file for a multi-fragment repository.</p>

  <p>As an example, a repository manifest list for the
  <code>math/testing</code> repository could look like this:</p>

  <pre># math/testing
#
: 1
email: math-pkg@example.org
summary: Math package repository
:
role: complement
location: ../stable
:
role: prerequiste
location: https://pkg.example.org/1/misc/testing</pre>

  <p>Here the first manifest describes the base repository itself, the second
  manifest &#8211; a complement repository, and the third manifest &#8211; a
  prerequisite repository. Note that the complement repository's location is
  specified as a relative path. For example, if the base repository location
  were:</p>

  <pre>https://pkg.example.org/1/math/testing</pre>

  <p>Then the completement's location would be:</p>

  <pre>https://pkg.example.org/1/math/stable</pre>

  <h2 id="manifest-signature-pkg">3.7 Signature Manifest for
  <code><b>pkg</b></code> Repositories</h2>

  <p>The signature manifest (the <code>signature.manifest</code> file found in
  the <code><b>pkg</b></code> repository root directory) contains the
  signature of the repository's <code>packages.manifest</code> file. In order
  to detect the situation where the downloaded <code>signature.manifest</code>
  and <code>packages.manifest</code> files belong to different updates, the
  manifest contains both the checksum and the signature (which is the
  encrypted checksum). <span class="note">We cannot rely on just the signature
  since a mismatch could mean either a split update or tampering.</span> The
  manifest synopsis is presented next followed by the detailed description of
  each value in subsequent sections.</p>

  <pre>sha256sum: &lt;sum>
signature: &lt;sig></pre>

  <h3 id="manifest-signature-pkg-sha256sum">3.7.1 <code>sha256sum</code></h3>

  <pre>sha256sum: &lt;sum></pre>

  <p>The SHA256 checksum of the <code>packages.manifest</code> file. The
  <i>sum</i> value should be 64 characters long (that is, just the SHA256
  value, no file name or any other markers), be calculated in the binary mode,
  and use lower-case letters.</p>

  <h3 id="manifest-signature-pkg-signature">3.7.2 <code>signature</code></h3>

  <pre>signature: &lt;sig></pre>

  <p>The signature of the <code>packages.manifest</code> file. It should be
  calculated by encrypting the above <code>sha256sum</code> value with the
  repository certificate's private key and then <code>base64</code>-encoding
  the result.</p>

</div>

</body>
</html>
